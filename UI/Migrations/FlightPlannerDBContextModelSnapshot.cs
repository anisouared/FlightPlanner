// <auto-generated />
using System;
using DataAccess.DB;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace UI.Migrations
{
    [DbContext(typeof(FlightPlannerDBContext))]
    partial class FlightPlannerDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DataAccess.DB.Aircraft", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConsumptionUnit")
                        .HasColumnName("consumption_unit")
                        .HasMaxLength(50);

                    b.Property<double>("FuelConsumption")
                        .HasColumnName("fuel_consumption");

                    b.Property<double?>("FuelConsumptionTakeoff")
                        .HasColumnName("fuel_consumption_takeoff");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnName("model")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("aircraft");
                });

            modelBuilder.Entity("DataAccess.DB.Airport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("City")
                        .HasColumnName("city");

                    b.Property<string>("CityCode")
                        .HasColumnName("city_code")
                        .HasMaxLength(100);

                    b.Property<string>("CityName")
                        .HasColumnName("city_name")
                        .HasMaxLength(200);

                    b.Property<string>("Code")
                        .HasColumnName("code")
                        .HasMaxLength(100);

                    b.Property<string>("CountryCode")
                        .HasColumnName("country_code")
                        .HasMaxLength(200);

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasColumnName("country_name")
                        .HasMaxLength(200);

                    b.Property<string>("Lat")
                        .HasColumnName("lat")
                        .HasMaxLength(100);

                    b.Property<string>("Lon")
                        .HasColumnName("lon")
                        .HasMaxLength(100);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasMaxLength(200);

                    b.Property<int?>("NumAirports")
                        .HasColumnName("num_airports");

                    b.Property<string>("TimeZone")
                        .HasColumnName("time_zone")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("Code", "Name", "CityCode")
                        .IsUnique()
                        .HasName("UQ_airport_code_name_citycode")
                        .HasFilter("[code] IS NOT NULL AND [city_code] IS NOT NULL");

                    b.ToTable("airport");
                });

            modelBuilder.Entity("DataAccess.DB.Flight", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double?>("Distance")
                        .HasColumnName("distance");

                    b.Property<string>("DistanceUnit")
                        .HasColumnName("distance_unit")
                        .HasMaxLength(50);

                    b.Property<int>("FkAircraft")
                        .HasColumnName("fk_aircraft");

                    b.Property<int>("FkArrival")
                        .HasColumnName("fk_arrival");

                    b.Property<int>("FkDeparture")
                        .HasColumnName("fk_departure");

                    b.Property<string>("FkUser")
                        .HasColumnName("fk_user");

                    b.Property<double?>("TripFuelConsumption")
                        .HasColumnName("trip_fuel_consumption");

                    b.HasKey("Id");

                    b.HasIndex("FkAircraft");

                    b.HasIndex("FkArrival");

                    b.HasIndex("FkDeparture");

                    b.HasIndex("FkUser");

                    b.ToTable("flight");
                });

            modelBuilder.Entity("DataAccess.DB.GroupMembership", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("id");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("group_membership");
                });

            modelBuilder.Entity("DataAccess.DB.User", b =>
                {
                    b.Property<string>("Id");

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("user");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("DataAccess.DB.Flight", b =>
                {
                    b.HasOne("DataAccess.DB.Aircraft", "FkAircraftNavigation")
                        .WithMany("Flight")
                        .HasForeignKey("FkAircraft")
                        .HasConstraintName("FK_flight_aircraft");

                    b.HasOne("DataAccess.DB.Airport", "FkArrivalNavigation")
                        .WithMany("FlightFkArrivalNavigation")
                        .HasForeignKey("FkArrival")
                        .HasConstraintName("FK_flight_airport_arrival");

                    b.HasOne("DataAccess.DB.Airport", "FkDepartureNavigation")
                        .WithMany("FlightFkDepartureNavigation")
                        .HasForeignKey("FkDeparture")
                        .HasConstraintName("FK_flight_airport_departure");

                    b.HasOne("DataAccess.DB.User", "FkUserNavigation")
                        .WithMany("Flight")
                        .HasForeignKey("FkUser")
                        .HasConstraintName("FK_flight_user");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("DataAccess.DB.GroupMembership")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("DataAccess.DB.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("DataAccess.DB.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("DataAccess.DB.GroupMembership")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataAccess.DB.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("DataAccess.DB.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
